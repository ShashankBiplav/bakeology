const fs = require('fs');

const path = require('path');

const Recipe = require('../models/recipe');

const Chef = require('../models/chef');

const mongoose = require("mongoose");

exports.postRecipe = async(req, res, next)=>{
    if (!req.file) {
        const error = new Error('No image provided');
        error.statusCode = 422;
        return next(error);
    }
    const title = req.body.title;
    const imageUrl = req.file.path; //generated by multer that holds path to image
    const chef = req.body.chef;
    const duration = req.body.duration;
    const affordability = req.body.affordability;
    const complexity = req.body.complexity;
    const isVegetarian = req.body.isVegetarian;
    const ingredients = req.body.ingredients;
    const categories = req.body.categories;
    const steps = req.body.steps;
    const recipe = new Recipe({
        title: title,
        imageUrl: imageUrl,
        duration: duration,
        ingredients: ingredients,
        categories: categories,
        steps:steps,
        chef: chef,
        complexity: complexity,
        affordability: affordability,
        isVegetarian: isVegetarian
    });
    try{
        await recipe.save();
        const chef = await Chef.findById(req.chefId);
        chef.recipes.push(recipe);
        res.status(201).json({
            message: 'Recipe created successfully',
            recipe: recipe,
            creator: {
                _id: recipe.chef,
                name: chef.name
            },
        });
    }catch (err) {
        if (!err.statusCode) {
            err.statusCode = 500;
        }
        next(err);
    }
};

exports.updateRecipe = async (req, res, next) =>{
    const recipeId = req.params.recipeId;
    const title = req.body.title;
    let imageUrl = req.body.image; //generated by multer that holds path to image
    const chef = req.body.chef;
    const duration = req.body.duration;
    const affordability = req.body.affordability;
    const complexity = req.body.complexity;
    const isVegetarian = req.body.isVegetarian;
    const ingredients = req.body.ingredients;
    const categories = req.body.categories;
    const steps = req.body.steps;
    if (req.file) {
        imageUrl = req.file.path;
    }
    if (!imageUrl) {
        const error = new Error('No file picked.');
        error.statusCode = 422;
        throw error;
    }
    try{
        const recipe = await Recipe.findById(recipeId).populate('creator');
        if (!recipe){
            const error = new Error('Could not find recipe.');
            error.statusCode = 404;
            throw error;
        }
        if (recipe.chef._id.toString() !== req.userId) {
            const error = new Error('Not Authorized.');
            error.statusCode = 403;
            throw error;
        }
        if (imageUrl !== recipe.imageUrl) {
            clearImage(recipe.imageUrl);
        }
        recipe.title = title;
        recipe.chef = chef;
        recipe.duration = duration;
        recipe.affordability = affordability;
        recipe.complexity = complexity;
        recipe.isVegetarian = isVegetarian;
        recipe.ingredients = ingredients;
        recipe.catgefories = categories;
        recipe.steps = steps;
        const result = await recipe.save();
        res.status(200).json({
            message: 'Recipe updated!',
            post: result
        });
    }
    catch (err) {
        if (!err.statusCode) {
            err.statusCode = 500;
        }
        next(err);
    }
};

exports.deleteRecipe = async (req, res, next) => {
    const recipeId = req.params.recipeId;
    try {
        const recipe = await Recipe.findById(recipeId);
        if (!recipe){
            const error = new Error('Could not find recipe.');
            error.statusCode = 404;
            throw error;
        }
        if (recipe.chef._id.toString() !== req.userId) {
            const error = new Error('Not Authorized.');
            error.statusCode = 403;
            throw error;
        }
        clearImage(recipe.imageUrl);
        await Recipe.findByIdAndRemove(recipeId);
        const chef = await Chef.findById(req.chefId);
        chef.recipes.pull(recipeId);
        await chef.save();
        res.status(200).json({
            message: 'Recipe deleted.'
        });
    }
    catch (err) {
        if (!err.statusCode) {
            err.statusCode = 500;
        }
        next(err);
    }
};

//helper function to delete image
const clearImage = filePath => {
    filePath = path.join(__dirname, '..', filePath);
    fs.unlink(filePath, err => console.log(err));
};